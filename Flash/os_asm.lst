


ARM Macro Assembler    Page 1 


    1 00000000                 PRESERVE8
    2 00000000                 AREA             OS_func, CODE, READONLY
    3 00000000         
    4 00000000         ; Export function locations
    5 00000000                 EXPORT           SVC_Handler
    6 00000000                 EXPORT           PendSV_Handler
    7 00000000                 IMPORT           _OS_scheduler
    8 00000000                 EXPORT           _task_switch
    9 00000000                 EXPORT           _task_init_switch
   10 00000000         
   11 00000000         ; Import global variables
   12 00000000                 IMPORT           _currentTCB
   13 00000000         
   14 00000000         ; Import SVC routines
   15 00000000                 IMPORT           _svc_OS_enable_irq
   16 00000000                 IMPORT           _svc_OS_addTask
   17 00000000                 IMPORT           _svc_OS_task_exit
   18 00000000                 IMPORT           _svc_OS_yield
   19 00000000                 IMPORT           _svc_OS_schedule
   20 00000000                 IMPORT           _svc_task_wait
   21 00000000                 IMPORT           _svc_task_notify
   22 00000000         
   23 00000000         SVC_Handler
   24 00000000         ; Link register contains special 'exit handler mode' cod
                       e
   25 00000000         ; Bit 2 tells whether the MSP or PSP was in use
   26 00000000 F01E 0F04       TST              lr, #4
   27 00000004 BF0C F3EF 
              8008             MRSEQ            r0, MSP
   28 0000000A F3EF 8009       MRSNE            r0, PSP
   29 0000000E         ; r0 now contains the SP that was in use
   30 0000000E         ; Return address is on the stack: load it into r1
   31 0000000E 6981            LDR              r1, [r0, #24]
   32 00000010         ; Use the return address to find the SVC instruction
   33 00000010         ; SVC instruction contains an 8-bit code
   34 00000010 F811 1C02       LDRB             r1, [r1, #-2]
   35 00000014         ; Check if it's in the table
   36 00000014 2907            CMP              r1, #((SVC_tableEnd - SVC_table
Start)/4)
   37 00000016         ; If not, return
   38 00000016 BFA8 4770       BXGE             lr
   39 0000001A         ; Branch to the right handler
   40 0000001A         ; Remember, the SP is in r0
   41 0000001A 4A1B            LDR              r2, =SVC_tableStart
   42 0000001C F852 F021       LDR              pc, [r2, r1, lsl #2]
   43 00000020         
   44 00000020                 ALIGN
   45 00000020         SVC_tableStart
   46 00000020 00000000        DCD              _svc_OS_enable_irq
   47 00000024 00000000        DCD              _svc_OS_addTask
   48 00000028 00000000        DCD              _svc_OS_task_exit
   49 0000002C 00000000        DCD              _svc_OS_yield
   50 00000030 00000000        DCD              _svc_OS_schedule
   51 00000034 00000000        DCD              _svc_task_wait
   52 00000038 00000000        DCD              _svc_task_notify
   53 0000003C         SVC_tableEnd
   54 0000003C         
   55 0000003C                 ALIGN
   56 0000003C         PendSV_Handler



ARM Macro Assembler    Page 2 


   57 0000003C B510            STMFD            sp!, {r4, lr} ; r4 included for
                                                             stack alignment
   58 0000003E 4813            LDR              r0, =_OS_scheduler
   59 00000040 4780            BLX              r0
   60 00000042 E8BD 4010       LDMFD            sp!, {r4, lr}
   61 00000046         _task_switch
   62 00000046         ; r0 contains nextTCB (OS_TCB *)
   63 00000046         ; Load r2 = &_currentTCB (OS_TCB **), r1 = _currentTCB (
                       OS_TCB *, == OS_StackFrame **)
   64 00000046 4A12            LDR              r2, =_currentTCB
   65 00000048 6811            LDR              r1, [r2]
   66 0000004A         ; Compare _currentTCB to nextTCB: if equal, go home
   67 0000004A 4281            CMP              r1, r0
   68 0000004C BF08 4770       BXEQ             lr
   69 00000050         ; If not, stack remaining process registers (pc, PSR, lr
                       , r0-r3, r12 already stacked)
   70 00000050 F3EF 8309       MRS              r3, PSP
   71 00000054 E923 0FF0       STMFD            r3!, {r4-r11}
   72 00000058         ; Store stack pointer
   73 00000058 600B            STR              r3, [r1]
   74 0000005A         ; Load new stack pointer
   75 0000005A 6803            LDR              r3, [r0]
   76 0000005C         ; Unstack process registers
   77 0000005C E8B3 0FF0       LDMFD            r3!, {r4-r11}
   78 00000060 F383 8809       MSR              PSP, r3
   79 00000064         ; Update _currentTCB
   80 00000064 6010            STR              r0, [r2]
   81 00000066         ; Clear exclusive access flag
   82 00000066 F3BF 8F2F       CLREX
   83 0000006A 4770            BX               lr
   84 0000006C         
   85 0000006C                 ALIGN
   86 0000006C         _task_init_switch
   87 0000006C         ; Assume thread mode on entry
   88 0000006C         ; Initial task is the idle task
   89 0000006C         ; On entry r0 = &_idleTaskSP (OS_TCB *, actually OS_Stac
                       kFrame **)
   90 0000006C         ; Load r1 = _idleTaskSP (OS_StackFrame *)
   91 0000006C 6801            LDR              r1, [r0]
   92 0000006E         ; Update PSP
   93 0000006E F381 8809       MSR              PSP, r1
   94 00000072         ; Update _currentTCB
   95 00000072 4A07            LDR              r2, =_currentTCB
   96 00000074 6010            STR              r0, [r2]
   97 00000076         ; Switch to using PSP instead of MSP for thread mode (bi
                       t 1 = 1)
   98 00000076         ; Also lose privileges in thread mode (bit 0 = 1) and di
                       sable FPU (bit 2 = 0)
   99 00000076 F04F 0203       MOV              r2, #3
  100 0000007A F382 8814       MSR              CONTROL, r2
  101 0000007E         ; Instruction barrier (stack pointer switch)
  102 0000007E F3BF 8F6F       ISB
  103 00000082         ; This SVC call should be OS_enableIRQ()
  104 00000082 DF00            SVC              0x00
  105 00000084         ; Continue to the idle task
  106 00000084         
  107 00000084                 ALIGN
  108 00000084         ; This SVC call should be OS_schedule()
  109 00000084         ; It causes a switch to a runnable task, if possible



ARM Macro Assembler    Page 3 


  110 00000084 DF04            SVC              0x04
  111 00000086         _idle_task
  112 00000086         ; The following line is commented out because it doesn't
                        play nicely with the debugger.
  113 00000086         ; For deployment, uncomment this line and the CPU will s
                       leep when idling, waking only to
  114 00000086         ; handle interrupts.
  115 00000086         ;   WFI
  116 00000086 E7FE            B                _idle_task
  117 00000088         
  118 00000088                 ALIGN
  119 00000088                 END
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\fla
sh\os_asm.d -o.\flash\os_asm.o -IC:\Keil_u4\ARM\RV31\INC -IC:\Keil_u4\ARM\CMSIS
\Include -IC:\Keil_u4\ARM\Inc\ST\STM32F4xx --predefine="__EVAL SETA 1" --list=.
\flash\os_asm.lst OS\os_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

OS_func 00000000

Symbol: OS_func
   Definitions
      At line 2 in file OS\os_asm.s
   Uses
      None
Comment: OS_func unused
PendSV_Handler 0000003C

Symbol: PendSV_Handler
   Definitions
      At line 56 in file OS\os_asm.s
   Uses
      At line 6 in file OS\os_asm.s
Comment: PendSV_Handler used once
SVC_Handler 00000000

Symbol: SVC_Handler
   Definitions
      At line 23 in file OS\os_asm.s
   Uses
      At line 5 in file OS\os_asm.s
Comment: SVC_Handler used once
SVC_tableEnd 0000003C

Symbol: SVC_tableEnd
   Definitions
      At line 53 in file OS\os_asm.s
   Uses
      At line 36 in file OS\os_asm.s
Comment: SVC_tableEnd used once
SVC_tableStart 00000020

Symbol: SVC_tableStart
   Definitions
      At line 45 in file OS\os_asm.s
   Uses
      At line 36 in file OS\os_asm.s
      At line 41 in file OS\os_asm.s

_idle_task 00000086

Symbol: _idle_task
   Definitions
      At line 111 in file OS\os_asm.s
   Uses
      At line 116 in file OS\os_asm.s
Comment: _idle_task used once
_task_init_switch 0000006C

Symbol: _task_init_switch
   Definitions
      At line 86 in file OS\os_asm.s
   Uses
      At line 9 in file OS\os_asm.s
Comment: _task_init_switch used once
_task_switch 00000046




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: _task_switch
   Definitions
      At line 61 in file OS\os_asm.s
   Uses
      At line 8 in file OS\os_asm.s
Comment: _task_switch used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

_OS_scheduler 00000000

Symbol: _OS_scheduler
   Definitions
      At line 7 in file OS\os_asm.s
   Uses
      At line 58 in file OS\os_asm.s
Comment: _OS_scheduler used once
_currentTCB 00000000

Symbol: _currentTCB
   Definitions
      At line 12 in file OS\os_asm.s
   Uses
      At line 64 in file OS\os_asm.s
      At line 95 in file OS\os_asm.s

_svc_OS_addTask 00000000

Symbol: _svc_OS_addTask
   Definitions
      At line 16 in file OS\os_asm.s
   Uses
      At line 47 in file OS\os_asm.s
Comment: _svc_OS_addTask used once
_svc_OS_enable_irq 00000000

Symbol: _svc_OS_enable_irq
   Definitions
      At line 15 in file OS\os_asm.s
   Uses
      At line 46 in file OS\os_asm.s
Comment: _svc_OS_enable_irq used once
_svc_OS_schedule 00000000

Symbol: _svc_OS_schedule
   Definitions
      At line 19 in file OS\os_asm.s
   Uses
      At line 50 in file OS\os_asm.s
Comment: _svc_OS_schedule used once
_svc_OS_task_exit 00000000

Symbol: _svc_OS_task_exit
   Definitions
      At line 17 in file OS\os_asm.s
   Uses
      At line 48 in file OS\os_asm.s
Comment: _svc_OS_task_exit used once
_svc_OS_yield 00000000

Symbol: _svc_OS_yield
   Definitions
      At line 18 in file OS\os_asm.s
   Uses
      At line 49 in file OS\os_asm.s
Comment: _svc_OS_yield used once
_svc_task_notify 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: _svc_task_notify
   Definitions
      At line 21 in file OS\os_asm.s
   Uses
      At line 52 in file OS\os_asm.s
Comment: _svc_task_notify used once
_svc_task_wait 00000000

Symbol: _svc_task_wait
   Definitions
      At line 20 in file OS\os_asm.s
   Uses
      At line 51 in file OS\os_asm.s
Comment: _svc_task_wait used once
9 symbols
351 symbols in table
